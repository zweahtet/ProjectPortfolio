{"pageProps":{"courses":[{"_id":"6199db6c95ed740d42770339","category":"Tree Recursion","title":"Pascal's Triangle","question":"Every number in Pascal's triangle is defined as the sum of the item above it and the item above and to the left of it. Use 0 if the item does not exist.\n\nDefine the procedure pascal(row, column) which takes a row and a column, and finds the value of the item at that position in Pascal's triangle. Rows and columns are zero-indexed; that is, the first row is row 0 instead of 1 and the first column is column 0 instead of column 1.\n\nFor example, the item at row 2, column 1 in Pascal's triangle is 2.","code":"def pascal(row, column):\n    \"\"\"Returns the value of the item in Pascal's Triangle \n    whose position is specified by row and column.\n    >>> pascal(0, 0)\n    1\n    >>> pascal(0, 5)\t# Empty entry; outside of Pascal's Triangle\n    0\n    >>> pascal(3, 2)\t# Row 3 (1 3 3 1), Column 2\n    3\n    >>> pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2\n    6\n    \"\"\"\n    if column == 0:\n    \treturn 1\n    elif row == 0:\n    \treturn 0\n    else:\n    \treturn pascal(row - 1, column) + pascal(row - 1, column - 1)\n\n","course":"cs61a","url":"http://cs61a.org"},{"_id":"6199dc66053409ee978cfaa4","category":"Tree Recursion","title":"Pascal's Triangle","question":"Every number in Pascal's triangle is defined as the sum of the item above it and the item above and to the left of it. Use 0 if the item does not exist.\n\nDefine the procedure pascal(row, column) which takes a row and a column, and finds the value of the item at that position in Pascal's triangle. Rows and columns are zero-indexed; that is, the first row is row 0 instead of 1 and the first column is column 0 instead of column 1.\n\nFor example, the item at row 2, column 1 in Pascal's triangle is 2.","code":"def pascal(row, column):\n    \"\"\"Returns the value of the item in Pascal's Triangle \n    whose position is specified by row and column.\n    >>> pascal(0, 0)\n    1\n    >>> pascal(0, 5)\t# Empty entry; outside of Pascal's Triangle\n    0\n    >>> pascal(3, 2)\t# Row 3 (1 3 3 1), Column 2\n    3\n    >>> pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2\n    6\n    \"\"\"\n    if column == 0:\n    \treturn 1\n    elif row == 0:\n    \treturn 0\n    else:\n    \treturn pascal(row - 1, column) + pascal(row - 1, column - 1)\n\n","course":"cs61a","url":"http://cs61a.org"},{"_id":"6199dc6d053409ee978cfaa5","category":"Tree Recursion","title":"Pascal's Triangle","question":"Every number in Pascal's triangle is defined as the sum of the item above it and the item above and to the left of it. Use 0 if the item does not exist.\n\nDefine the procedure pascal(row, column) which takes a row and a column, and finds the value of the item at that position in Pascal's triangle. Rows and columns are zero-indexed; that is, the first row is row 0 instead of 1 and the first column is column 0 instead of column 1.\n\nFor example, the item at row 2, column 1 in Pascal's triangle is 2.","code":"def pascal(row, column):\n    \"\"\"Returns the value of the item in Pascal's Triangle \n    whose position is specified by row and column.\n    >>> pascal(0, 0)\n    1\n    >>> pascal(0, 5)\t# Empty entry; outside of Pascal's Triangle\n    0\n    >>> pascal(3, 2)\t# Row 3 (1 3 3 1), Column 2\n    3\n    >>> pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2\n    6\n    \"\"\"\n    if column == 0:\n    \treturn 1\n    elif row == 0:\n    \treturn 0\n    else:\n    \treturn pascal(row - 1, column) + pascal(row - 1, column - 1)\n\n","course":"cs61a","url":"http://cs61a.org"},{"_id":"6199dc71053409ee978cfaa6","category":"Tree Recursion","title":"Pascal's Triangle","question":"Every number in Pascal's triangle is defined as the sum of the item above it and the item above and to the left of it. Use 0 if the item does not exist.\n\nDefine the procedure pascal(row, column) which takes a row and a column, and finds the value of the item at that position in Pascal's triangle. Rows and columns are zero-indexed; that is, the first row is row 0 instead of 1 and the first column is column 0 instead of column 1.\n\nFor example, the item at row 2, column 1 in Pascal's triangle is 2.","code":"def pascal(row, column):\n    \"\"\"Returns the value of the item in Pascal's Triangle \n    whose position is specified by row and column.\n    >>> pascal(0, 0)\n    1\n    >>> pascal(0, 5)\t# Empty entry; outside of Pascal's Triangle\n    0\n    >>> pascal(3, 2)\t# Row 3 (1 3 3 1), Column 2\n    3\n    >>> pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2\n    6\n    \"\"\"\n    if column == 0:\n    \treturn 1\n    elif row == 0:\n    \treturn 0\n    else:\n    \treturn pascal(row - 1, column) + pascal(row - 1, column - 1)\n\n","course":"cs61a","url":"http://cs61a.org"},{"_id":"6199dc76053409ee978cfaa7","category":"Tree Recursion","title":"Pascal's Triangle","question":"Every number in Pascal's triangle is defined as the sum of the item above it and the item above and to the left of it. Use 0 if the item does not exist.\n\nDefine the procedure pascal(row, column) which takes a row and a column, and finds the value of the item at that position in Pascal's triangle. Rows and columns are zero-indexed; that is, the first row is row 0 instead of 1 and the first column is column 0 instead of column 1.\n\nFor example, the item at row 2, column 1 in Pascal's triangle is 2.","code":"def pascal(row, column):\n    \"\"\"Returns the value of the item in Pascal's Triangle \n    whose position is specified by row and column.\n    >>> pascal(0, 0)\n    1\n    >>> pascal(0, 5)\t# Empty entry; outside of Pascal's Triangle\n    0\n    >>> pascal(3, 2)\t# Row 3 (1 3 3 1), Column 2\n    3\n    >>> pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2\n    6\n    \"\"\"\n    if column == 0:\n    \treturn 1\n    elif row == 0:\n    \treturn 0\n    else:\n    \treturn pascal(row - 1, column) + pascal(row - 1, column - 1)\n\n","course":"cs61a","url":"http://cs61a.org"},{"_id":"6199dc7a053409ee978cfaa8","category":"Tree Recursion","title":"Pascal's Triangle","question":"Every number in Pascal's triangle is defined as the sum of the item above it and the item above and to the left of it. Use 0 if the item does not exist.\n\nDefine the procedure pascal(row, column) which takes a row and a column, and finds the value of the item at that position in Pascal's triangle. Rows and columns are zero-indexed; that is, the first row is row 0 instead of 1 and the first column is column 0 instead of column 1.\n\nFor example, the item at row 2, column 1 in Pascal's triangle is 2.","code":"def pascal(row, column):\n    \"\"\"Returns the value of the item in Pascal's Triangle \n    whose position is specified by row and column.\n    >>> pascal(0, 0)\n    1\n    >>> pascal(0, 5)\t# Empty entry; outside of Pascal's Triangle\n    0\n    >>> pascal(3, 2)\t# Row 3 (1 3 3 1), Column 2\n    3\n    >>> pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2\n    6\n    \"\"\"\n    if column == 0:\n    \treturn 1\n    elif row == 0:\n    \treturn 0\n    else:\n    \treturn pascal(row - 1, column) + pascal(row - 1, column - 1)\n\n","course":"cs61a","url":"http://cs61a.org"},{"_id":"6199dc80053409ee978cfaa9","category":"Tree Recursion","title":"Pascal's Triangle","question":"Every number in Pascal's triangle is defined as the sum of the item above it and the item above and to the left of it. Use 0 if the item does not exist.\n\nDefine the procedure pascal(row, column) which takes a row and a column, and finds the value of the item at that position in Pascal's triangle. Rows and columns are zero-indexed; that is, the first row is row 0 instead of 1 and the first column is column 0 instead of column 1.\n\nFor example, the item at row 2, column 1 in Pascal's triangle is 2.","code":"def pascal(row, column):\n    \"\"\"Returns the value of the item in Pascal's Triangle \n    whose position is specified by row and column.\n    >>> pascal(0, 0)\n    1\n    >>> pascal(0, 5)\t# Empty entry; outside of Pascal's Triangle\n    0\n    >>> pascal(3, 2)\t# Row 3 (1 3 3 1), Column 2\n    3\n    >>> pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2\n    6\n    \"\"\"\n    if column == 0:\n    \treturn 1\n    elif row == 0:\n    \treturn 0\n    else:\n    \treturn pascal(row - 1, column) + pascal(row - 1, column - 1)\n\n","course":"cs61a","url":"http://cs61a.org"},{"_id":"6199dc85053409ee978cfaaa","category":"Tree Recursion","title":"Pascal's Triangle","question":"Every number in Pascal's triangle is defined as the sum of the item above it and the item above and to the left of it. Use 0 if the item does not exist.\n\nDefine the procedure pascal(row, column) which takes a row and a column, and finds the value of the item at that position in Pascal's triangle. Rows and columns are zero-indexed; that is, the first row is row 0 instead of 1 and the first column is column 0 instead of column 1.\n\nFor example, the item at row 2, column 1 in Pascal's triangle is 2.","code":"def pascal(row, column):\n    \"\"\"Returns the value of the item in Pascal's Triangle \n    whose position is specified by row and column.\n    >>> pascal(0, 0)\n    1\n    >>> pascal(0, 5)\t# Empty entry; outside of Pascal's Triangle\n    0\n    >>> pascal(3, 2)\t# Row 3 (1 3 3 1), Column 2\n    3\n    >>> pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2\n    6\n    \"\"\"\n    if column == 0:\n    \treturn 1\n    elif row == 0:\n    \treturn 0\n    else:\n    \treturn pascal(row - 1, column) + pascal(row - 1, column - 1)\n\n","course":"cs61a","url":"http://cs61a.org"},{"_id":"61aa7609d218089726fa40d8","category":"Linked List","title":"Q3: Sum Nums","question":"Write a function that takes in a linked list and returns the sum of all its elements. You may assume all elements in s are integers. Try to implement this recursively!","code":"def sum_nums(s):\n    \"\"\"\n    >>> a = Link(1, Link(6, Link(7)))\n    >>> sum_nums(a)\n    14\n    \"\"\"\n    if s == Link.empty:\n        return 0\n    return s.first + sum_nums(s.rest)","course":"cs61a","url":"http://cs61a.org"},{"_id":"61aa7697d218089726fa40d9","category":"Linked List","title":"Q4: Multiply Links","question":"Write a function that takes in a Python list of linked lists and multiplies them element-wise. It should return a new linked list.\n\nIf not all of the Link objects are of equal length, return a linked list whose length is that of the shortest linked list given. You may assume the Link objects are shallow linked lists, and that lst_of_lnks contains at least one linked list.","code":"def multiply_lnks(lst_of_lnks):\n    \"\"\"\n    >>> a = Link(2, Link(3, Link(5)))\n    >>> b = Link(6, Link(4, Link(2)))\n    >>> c = Link(4, Link(1, Link(0, Link(2))))\n    >>> p = multiply_lnks([a, b, c])\n    >>> p.first\n    48\n    >>> p.rest.first\n    12\n    >>> p.rest.rest.rest is Link.empty\n    True\n    \"\"\"\n    # Implementation Note: you might not need all lines in this skeleton code\n    product = 1\n    for lnk in lst_of_lnks:\n        if lnk is Link.empty:\n            return Link.empty\n        product *= lnk.first\n    lst_of_lnks_rests = [lnk.rest for lnk in lst_of_lnks]\n    return Link(product, multiply_lnks(lst_of_lnks_rests))","course":"cs61a","url":"http://cs61a.org"}]},"__N_SSG":true}